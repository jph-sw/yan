/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as PathlessLayoutRouteImport } from './routes/_pathlessLayout'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthPathlessLayoutRouteRouteImport } from './routes/_auth/_pathlessLayout/route'
import { Route as ApiSetDocumentIdRouteImport } from './routes/api/set-document.$id'
import { Route as ApiGetDocumentIdRouteImport } from './routes/api/get-document.$id'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth/$'
import { Route as AuthPathlessLayoutHomeRouteImport } from './routes/_auth/_pathlessLayout/home'
import { Route as AuthPathlessLayoutDocIdRouteImport } from './routes/_auth/_pathlessLayout/doc.$id'
import { Route as AuthPathlessLayoutCollectionIdRouteImport } from './routes/_auth/_pathlessLayout/collection.$id'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const PathlessLayoutRoute = PathlessLayoutRouteImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthPathlessLayoutRouteRoute = AuthPathlessLayoutRouteRouteImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => AuthRoute,
} as any)
const ApiSetDocumentIdRoute = ApiSetDocumentIdRouteImport.update({
  id: '/api/set-document/$id',
  path: '/api/set-document/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiGetDocumentIdRoute = ApiGetDocumentIdRouteImport.update({
  id: '/api/get-document/$id',
  path: '/api/get-document/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthPathlessLayoutHomeRoute = AuthPathlessLayoutHomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => AuthPathlessLayoutRouteRoute,
} as any)
const AuthPathlessLayoutDocIdRoute = AuthPathlessLayoutDocIdRouteImport.update({
  id: '/doc/$id',
  path: '/doc/$id',
  getParentRoute: () => AuthPathlessLayoutRouteRoute,
} as any)
const AuthPathlessLayoutCollectionIdRoute =
  AuthPathlessLayoutCollectionIdRouteImport.update({
    id: '/collection/$id',
    path: '/collection/$id',
    getParentRoute: () => AuthPathlessLayoutRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/home': typeof AuthPathlessLayoutHomeRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/get-document/$id': typeof ApiGetDocumentIdRoute
  '/api/set-document/$id': typeof ApiSetDocumentIdRoute
  '/collection/$id': typeof AuthPathlessLayoutCollectionIdRoute
  '/doc/$id': typeof AuthPathlessLayoutDocIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/home': typeof AuthPathlessLayoutHomeRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/get-document/$id': typeof ApiGetDocumentIdRoute
  '/api/set-document/$id': typeof ApiSetDocumentIdRoute
  '/collection/$id': typeof AuthPathlessLayoutCollectionIdRoute
  '/doc/$id': typeof AuthPathlessLayoutDocIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_pathlessLayout': typeof PathlessLayoutRoute
  '/login': typeof LoginRoute
  '/_auth/_pathlessLayout': typeof AuthPathlessLayoutRouteRouteWithChildren
  '/_auth/_pathlessLayout/home': typeof AuthPathlessLayoutHomeRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/get-document/$id': typeof ApiGetDocumentIdRoute
  '/api/set-document/$id': typeof ApiSetDocumentIdRoute
  '/_auth/_pathlessLayout/collection/$id': typeof AuthPathlessLayoutCollectionIdRoute
  '/_auth/_pathlessLayout/doc/$id': typeof AuthPathlessLayoutDocIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/home'
    | '/api/auth/$'
    | '/api/get-document/$id'
    | '/api/set-document/$id'
    | '/collection/$id'
    | '/doc/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/home'
    | '/api/auth/$'
    | '/api/get-document/$id'
    | '/api/set-document/$id'
    | '/collection/$id'
    | '/doc/$id'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_pathlessLayout'
    | '/login'
    | '/_auth/_pathlessLayout'
    | '/_auth/_pathlessLayout/home'
    | '/api/auth/$'
    | '/api/get-document/$id'
    | '/api/set-document/$id'
    | '/_auth/_pathlessLayout/collection/$id'
    | '/_auth/_pathlessLayout/doc/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  PathlessLayoutRoute: typeof PathlessLayoutRoute
  LoginRoute: typeof LoginRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
  ApiGetDocumentIdRoute: typeof ApiGetDocumentIdRoute
  ApiSetDocumentIdRoute: typeof ApiSetDocumentIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_pathlessLayout': {
      id: '/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/_pathlessLayout': {
      id: '/_auth/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthPathlessLayoutRouteRouteImport
      parentRoute: typeof AuthRoute
    }
    '/api/set-document/$id': {
      id: '/api/set-document/$id'
      path: '/api/set-document/$id'
      fullPath: '/api/set-document/$id'
      preLoaderRoute: typeof ApiSetDocumentIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/get-document/$id': {
      id: '/api/get-document/$id'
      path: '/api/get-document/$id'
      fullPath: '/api/get-document/$id'
      preLoaderRoute: typeof ApiGetDocumentIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/_pathlessLayout/home': {
      id: '/_auth/_pathlessLayout/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof AuthPathlessLayoutHomeRouteImport
      parentRoute: typeof AuthPathlessLayoutRouteRoute
    }
    '/_auth/_pathlessLayout/doc/$id': {
      id: '/_auth/_pathlessLayout/doc/$id'
      path: '/doc/$id'
      fullPath: '/doc/$id'
      preLoaderRoute: typeof AuthPathlessLayoutDocIdRouteImport
      parentRoute: typeof AuthPathlessLayoutRouteRoute
    }
    '/_auth/_pathlessLayout/collection/$id': {
      id: '/_auth/_pathlessLayout/collection/$id'
      path: '/collection/$id'
      fullPath: '/collection/$id'
      preLoaderRoute: typeof AuthPathlessLayoutCollectionIdRouteImport
      parentRoute: typeof AuthPathlessLayoutRouteRoute
    }
  }
}

interface AuthPathlessLayoutRouteRouteChildren {
  AuthPathlessLayoutHomeRoute: typeof AuthPathlessLayoutHomeRoute
  AuthPathlessLayoutCollectionIdRoute: typeof AuthPathlessLayoutCollectionIdRoute
  AuthPathlessLayoutDocIdRoute: typeof AuthPathlessLayoutDocIdRoute
}

const AuthPathlessLayoutRouteRouteChildren: AuthPathlessLayoutRouteRouteChildren =
  {
    AuthPathlessLayoutHomeRoute: AuthPathlessLayoutHomeRoute,
    AuthPathlessLayoutCollectionIdRoute: AuthPathlessLayoutCollectionIdRoute,
    AuthPathlessLayoutDocIdRoute: AuthPathlessLayoutDocIdRoute,
  }

const AuthPathlessLayoutRouteRouteWithChildren =
  AuthPathlessLayoutRouteRoute._addFileChildren(
    AuthPathlessLayoutRouteRouteChildren,
  )

interface AuthRouteChildren {
  AuthPathlessLayoutRouteRoute: typeof AuthPathlessLayoutRouteRouteWithChildren
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthPathlessLayoutRouteRoute: AuthPathlessLayoutRouteRouteWithChildren,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  PathlessLayoutRoute: PathlessLayoutRoute,
  LoginRoute: LoginRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
  ApiGetDocumentIdRoute: ApiGetDocumentIdRoute,
  ApiSetDocumentIdRoute: ApiSetDocumentIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
