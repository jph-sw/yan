/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as PathlessLayoutRouteImport } from './routes/_pathlessLayout'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ApiUsersRouteImport } from './routes/api/users'
import { Route as PathlessLayoutNestedLayoutRouteImport } from './routes/_pathlessLayout/_nested-layout'
import { Route as AuthPathlessLayoutRouteRouteImport } from './routes/_auth/_pathlessLayout/route'
import { Route as ApiUsersIdRouteImport } from './routes/api/users.$id'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth/$'
import { Route as PathlessLayoutNestedLayoutRouteBRouteImport } from './routes/_pathlessLayout/_nested-layout/route-b'
import { Route as PathlessLayoutNestedLayoutRouteARouteImport } from './routes/_pathlessLayout/_nested-layout/route-a'
import { Route as AuthPathlessLayoutHomeRouteImport } from './routes/_auth/_pathlessLayout/home'
import { Route as AuthPathlessLayoutDocIdRouteImport } from './routes/_auth/_pathlessLayout/doc.$id'
import { Route as AuthPathlessLayoutCollectionIdRouteImport } from './routes/_auth/_pathlessLayout/collection.$id'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const PathlessLayoutRoute = PathlessLayoutRouteImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiUsersRoute = ApiUsersRouteImport.update({
  id: '/api/users',
  path: '/api/users',
  getParentRoute: () => rootRouteImport,
} as any)
const PathlessLayoutNestedLayoutRoute =
  PathlessLayoutNestedLayoutRouteImport.update({
    id: '/_nested-layout',
    getParentRoute: () => PathlessLayoutRoute,
  } as any)
const AuthPathlessLayoutRouteRoute = AuthPathlessLayoutRouteRouteImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => AuthRoute,
} as any)
const ApiUsersIdRoute = ApiUsersIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => ApiUsersRoute,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)
const PathlessLayoutNestedLayoutRouteBRoute =
  PathlessLayoutNestedLayoutRouteBRouteImport.update({
    id: '/route-b',
    path: '/route-b',
    getParentRoute: () => PathlessLayoutNestedLayoutRoute,
  } as any)
const PathlessLayoutNestedLayoutRouteARoute =
  PathlessLayoutNestedLayoutRouteARouteImport.update({
    id: '/route-a',
    path: '/route-a',
    getParentRoute: () => PathlessLayoutNestedLayoutRoute,
  } as any)
const AuthPathlessLayoutHomeRoute = AuthPathlessLayoutHomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => AuthPathlessLayoutRouteRoute,
} as any)
const AuthPathlessLayoutDocIdRoute = AuthPathlessLayoutDocIdRouteImport.update({
  id: '/doc/$id',
  path: '/doc/$id',
  getParentRoute: () => AuthPathlessLayoutRouteRoute,
} as any)
const AuthPathlessLayoutCollectionIdRoute =
  AuthPathlessLayoutCollectionIdRouteImport.update({
    id: '/collection/$id',
    path: '/collection/$id',
    getParentRoute: () => AuthPathlessLayoutRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/api/users': typeof ApiUsersRouteWithChildren
  '/home': typeof AuthPathlessLayoutHomeRoute
  '/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/users/$id': typeof ApiUsersIdRoute
  '/collection/$id': typeof AuthPathlessLayoutCollectionIdRoute
  '/doc/$id': typeof AuthPathlessLayoutDocIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/api/users': typeof ApiUsersRouteWithChildren
  '/home': typeof AuthPathlessLayoutHomeRoute
  '/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/users/$id': typeof ApiUsersIdRoute
  '/collection/$id': typeof AuthPathlessLayoutCollectionIdRoute
  '/doc/$id': typeof AuthPathlessLayoutDocIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_pathlessLayout': typeof PathlessLayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/_auth/_pathlessLayout': typeof AuthPathlessLayoutRouteRouteWithChildren
  '/_pathlessLayout/_nested-layout': typeof PathlessLayoutNestedLayoutRouteWithChildren
  '/api/users': typeof ApiUsersRouteWithChildren
  '/_auth/_pathlessLayout/home': typeof AuthPathlessLayoutHomeRoute
  '/_pathlessLayout/_nested-layout/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/_pathlessLayout/_nested-layout/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/users/$id': typeof ApiUsersIdRoute
  '/_auth/_pathlessLayout/collection/$id': typeof AuthPathlessLayoutCollectionIdRoute
  '/_auth/_pathlessLayout/doc/$id': typeof AuthPathlessLayoutDocIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/api/users'
    | '/home'
    | '/route-a'
    | '/route-b'
    | '/api/auth/$'
    | '/api/users/$id'
    | '/collection/$id'
    | '/doc/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/api/users'
    | '/home'
    | '/route-a'
    | '/route-b'
    | '/api/auth/$'
    | '/api/users/$id'
    | '/collection/$id'
    | '/doc/$id'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_pathlessLayout'
    | '/login'
    | '/_auth/_pathlessLayout'
    | '/_pathlessLayout/_nested-layout'
    | '/api/users'
    | '/_auth/_pathlessLayout/home'
    | '/_pathlessLayout/_nested-layout/route-a'
    | '/_pathlessLayout/_nested-layout/route-b'
    | '/api/auth/$'
    | '/api/users/$id'
    | '/_auth/_pathlessLayout/collection/$id'
    | '/_auth/_pathlessLayout/doc/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  PathlessLayoutRoute: typeof PathlessLayoutRouteWithChildren
  LoginRoute: typeof LoginRoute
  ApiUsersRoute: typeof ApiUsersRouteWithChildren
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_pathlessLayout': {
      id: '/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/users': {
      id: '/api/users'
      path: '/api/users'
      fullPath: '/api/users'
      preLoaderRoute: typeof ApiUsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_pathlessLayout/_nested-layout': {
      id: '/_pathlessLayout/_nested-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteImport
      parentRoute: typeof PathlessLayoutRoute
    }
    '/_auth/_pathlessLayout': {
      id: '/_auth/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthPathlessLayoutRouteRouteImport
      parentRoute: typeof AuthRoute
    }
    '/api/users/$id': {
      id: '/api/users/$id'
      path: '/$id'
      fullPath: '/api/users/$id'
      preLoaderRoute: typeof ApiUsersIdRouteImport
      parentRoute: typeof ApiUsersRoute
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_pathlessLayout/_nested-layout/route-b': {
      id: '/_pathlessLayout/_nested-layout/route-b'
      path: '/route-b'
      fullPath: '/route-b'
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteBRouteImport
      parentRoute: typeof PathlessLayoutNestedLayoutRoute
    }
    '/_pathlessLayout/_nested-layout/route-a': {
      id: '/_pathlessLayout/_nested-layout/route-a'
      path: '/route-a'
      fullPath: '/route-a'
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteARouteImport
      parentRoute: typeof PathlessLayoutNestedLayoutRoute
    }
    '/_auth/_pathlessLayout/home': {
      id: '/_auth/_pathlessLayout/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof AuthPathlessLayoutHomeRouteImport
      parentRoute: typeof AuthPathlessLayoutRouteRoute
    }
    '/_auth/_pathlessLayout/doc/$id': {
      id: '/_auth/_pathlessLayout/doc/$id'
      path: '/doc/$id'
      fullPath: '/doc/$id'
      preLoaderRoute: typeof AuthPathlessLayoutDocIdRouteImport
      parentRoute: typeof AuthPathlessLayoutRouteRoute
    }
    '/_auth/_pathlessLayout/collection/$id': {
      id: '/_auth/_pathlessLayout/collection/$id'
      path: '/collection/$id'
      fullPath: '/collection/$id'
      preLoaderRoute: typeof AuthPathlessLayoutCollectionIdRouteImport
      parentRoute: typeof AuthPathlessLayoutRouteRoute
    }
  }
}

interface AuthPathlessLayoutRouteRouteChildren {
  AuthPathlessLayoutHomeRoute: typeof AuthPathlessLayoutHomeRoute
  AuthPathlessLayoutCollectionIdRoute: typeof AuthPathlessLayoutCollectionIdRoute
  AuthPathlessLayoutDocIdRoute: typeof AuthPathlessLayoutDocIdRoute
}

const AuthPathlessLayoutRouteRouteChildren: AuthPathlessLayoutRouteRouteChildren =
  {
    AuthPathlessLayoutHomeRoute: AuthPathlessLayoutHomeRoute,
    AuthPathlessLayoutCollectionIdRoute: AuthPathlessLayoutCollectionIdRoute,
    AuthPathlessLayoutDocIdRoute: AuthPathlessLayoutDocIdRoute,
  }

const AuthPathlessLayoutRouteRouteWithChildren =
  AuthPathlessLayoutRouteRoute._addFileChildren(
    AuthPathlessLayoutRouteRouteChildren,
  )

interface AuthRouteChildren {
  AuthPathlessLayoutRouteRoute: typeof AuthPathlessLayoutRouteRouteWithChildren
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthPathlessLayoutRouteRoute: AuthPathlessLayoutRouteRouteWithChildren,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface PathlessLayoutNestedLayoutRouteChildren {
  PathlessLayoutNestedLayoutRouteARoute: typeof PathlessLayoutNestedLayoutRouteARoute
  PathlessLayoutNestedLayoutRouteBRoute: typeof PathlessLayoutNestedLayoutRouteBRoute
}

const PathlessLayoutNestedLayoutRouteChildren: PathlessLayoutNestedLayoutRouteChildren =
  {
    PathlessLayoutNestedLayoutRouteARoute:
      PathlessLayoutNestedLayoutRouteARoute,
    PathlessLayoutNestedLayoutRouteBRoute:
      PathlessLayoutNestedLayoutRouteBRoute,
  }

const PathlessLayoutNestedLayoutRouteWithChildren =
  PathlessLayoutNestedLayoutRoute._addFileChildren(
    PathlessLayoutNestedLayoutRouteChildren,
  )

interface PathlessLayoutRouteChildren {
  PathlessLayoutNestedLayoutRoute: typeof PathlessLayoutNestedLayoutRouteWithChildren
}

const PathlessLayoutRouteChildren: PathlessLayoutRouteChildren = {
  PathlessLayoutNestedLayoutRoute: PathlessLayoutNestedLayoutRouteWithChildren,
}

const PathlessLayoutRouteWithChildren = PathlessLayoutRoute._addFileChildren(
  PathlessLayoutRouteChildren,
)

interface ApiUsersRouteChildren {
  ApiUsersIdRoute: typeof ApiUsersIdRoute
}

const ApiUsersRouteChildren: ApiUsersRouteChildren = {
  ApiUsersIdRoute: ApiUsersIdRoute,
}

const ApiUsersRouteWithChildren = ApiUsersRoute._addFileChildren(
  ApiUsersRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  PathlessLayoutRoute: PathlessLayoutRouteWithChildren,
  LoginRoute: LoginRoute,
  ApiUsersRoute: ApiUsersRouteWithChildren,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
